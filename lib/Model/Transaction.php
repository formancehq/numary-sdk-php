<?php
/**
 * Transaction
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Numary\Ledger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ledger API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.6.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Numary\Ledger\Model;

use \ArrayAccess;
use \Numary\Ledger\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Numary\Ledger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'postings' => '\Numary\Ledger\Model\Posting[]',
        'reference' => 'string',
        'metadata' => 'array<string,mixed>',
        'timestamp' => '\DateTime',
        'txid' => 'int',
        'pre_commit_volumes' => 'array<string,array>',
        'post_commit_volumes' => 'array<string,array>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'postings' => null,
        'reference' => null,
        'metadata' => null,
        'timestamp' => 'date-time',
        'txid' => null,
        'pre_commit_volumes' => null,
        'post_commit_volumes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'postings' => 'postings',
        'reference' => 'reference',
        'metadata' => 'metadata',
        'timestamp' => 'timestamp',
        'txid' => 'txid',
        'pre_commit_volumes' => 'preCommitVolumes',
        'post_commit_volumes' => 'postCommitVolumes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'postings' => 'setPostings',
        'reference' => 'setReference',
        'metadata' => 'setMetadata',
        'timestamp' => 'setTimestamp',
        'txid' => 'setTxid',
        'pre_commit_volumes' => 'setPreCommitVolumes',
        'post_commit_volumes' => 'setPostCommitVolumes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'postings' => 'getPostings',
        'reference' => 'getReference',
        'metadata' => 'getMetadata',
        'timestamp' => 'getTimestamp',
        'txid' => 'getTxid',
        'pre_commit_volumes' => 'getPreCommitVolumes',
        'post_commit_volumes' => 'getPostCommitVolumes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['postings'] = $data['postings'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['txid'] = $data['txid'] ?? null;
        $this->container['pre_commit_volumes'] = $data['pre_commit_volumes'] ?? null;
        $this->container['post_commit_volumes'] = $data['post_commit_volumes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['postings'] === null) {
            $invalidProperties[] = "'postings' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['txid'] === null) {
            $invalidProperties[] = "'txid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets postings
     *
     * @return \Numary\Ledger\Model\Posting[]
     */
    public function getPostings()
    {
        return $this->container['postings'];
    }

    /**
     * Sets postings
     *
     * @param \Numary\Ledger\Model\Posting[] $postings postings
     *
     * @return self
     */
    public function setPostings($postings)
    {
        $this->container['postings'] = $postings;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,mixed>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,mixed>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets txid
     *
     * @return int
     */
    public function getTxid()
    {
        return $this->container['txid'];
    }

    /**
     * Sets txid
     *
     * @param int $txid txid
     *
     * @return self
     */
    public function setTxid($txid)
    {
        $this->container['txid'] = $txid;

        return $this;
    }

    /**
     * Gets pre_commit_volumes
     *
     * @return array<string,array>|null
     */
    public function getPreCommitVolumes()
    {
        return $this->container['pre_commit_volumes'];
    }

    /**
     * Sets pre_commit_volumes
     *
     * @param array<string,array>|null $pre_commit_volumes pre_commit_volumes
     *
     * @return self
     */
    public function setPreCommitVolumes($pre_commit_volumes)
    {
        $this->container['pre_commit_volumes'] = $pre_commit_volumes;

        return $this;
    }

    /**
     * Gets post_commit_volumes
     *
     * @return array<string,array>|null
     */
    public function getPostCommitVolumes()
    {
        return $this->container['post_commit_volumes'];
    }

    /**
     * Sets post_commit_volumes
     *
     * @param array<string,array>|null $post_commit_volumes post_commit_volumes
     *
     * @return self
     */
    public function setPostCommitVolumes($post_commit_volumes)
    {
        $this->container['post_commit_volumes'] = $post_commit_volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


