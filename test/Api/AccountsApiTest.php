<?php
/**
 * AccountsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ledger API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use GuzzleHttp\Client;
use OpenAPI\Client\Api\AccountsApi;
use OpenAPI\Client\Api\TransactionsApi;
use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use OpenAPI\Client\Model\TransactionData;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AccountsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApiTest extends ApiTest
{

    /**
     * Setup before running each test case
     * @throws \Exception
     */
    public function setUp(): void
    {
        parent::setUp();
        $this->transactionApi = new TransactionsApi($this->httpClient, $this->config);
        $this->accountApi = new AccountsApi($this->httpClient, $this->config);
    }

    /**
     * Test case for addMetadataToAccount
     *
     * Add metadata to account.
     *
     * @throws ApiException
     */
    public function testAddMetadataToAccount()
    {
        $this->transactionApi->createTransaction($this->ledger, new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ]
        ]));
        $this->accountApi->addMetadataToAccount($this->ledger, "player1", ["foo" => "bar"]);
        $account = $this->accountApi->getAccount($this->ledger, "player1");
        $this->assertEquals("bar", $account->getData()->getMetadata()["foo"]);
    }

    /**
     * Test case for getAccount
     *
     * Get account by address.
     *
     * @throws ApiException
     */
    public function testGetAccount()
    {
        $this->transactionApi->createTransaction($this->ledger, new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ]
        ]));
        $account = $this->accountApi->getAccount($this->ledger, "player1");
        $this->assertEquals(100, $account->getData()->getBalances()["USD"]);
    }

    /**
     * Test case for listAccounts
     *
     * List all accounts.
     *
     * @throws ApiException
     */
    public function testListAccounts()
    {
        $this->transactionApi->createTransaction($this->ledger, new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ]
        ]));
        $accounts = $this->accountApi->listAccounts($this->ledger);
        $this->assertCount(2, $accounts->getCursor()->getData());
    }
}
