<?php
/**
 * TransactionsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  Numary\Ledger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ledger API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Numary\Ledger\Test\Api;

use GuzzleHttp\Client;
use Numary\Ledger\Api\TransactionsApi;
use \Numary\Ledger\Configuration;
use \Numary\Ledger\ApiException;
use Numary\Ledger\Model\TransactionData;
use \Numary\Ledger\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * TransactionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Numary\Ledger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApiTest extends ApiTest
{

    /**
     * Setup before running each test case
     * @throws \Exception
     */
    public function setUp(): void
    {
        parent::setUp();
        $this->transactionApi = new TransactionsApi($this->httpClient, $this->config);
    }


    /**
     * Test case for addMetadataOnTransaction
     *
     * Set Transaction Metadata.
     *
     * @throws ApiException
     */
    public function testAddMetadataOnTransaction()
    {
        $transaction_data = new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ],
        ]);
        $tx = $this->transactionApi->createTransaction($this->ledger, $transaction_data);
        $this->transactionApi->addMetadataOnTransaction($this->ledger, $tx->getData()[0]->getTxid(), ["foo" => "bar"]);
        $tx = $this->transactionApi->getTransaction($this->ledger, $tx->getData()[0]->getTxid());
        $this->assertEquals("bar", $tx->getData()->getMetadata()["foo"]);
    }

    /**
     * Test case for createTransaction
     *
     * Create Transaction.
     *
     * @throws ApiException
     */
    public function testCreateTransaction()
    {
        $transaction_data = new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ],
        ]);

        $result = $this->transactionApi->createTransaction($this->ledger, $transaction_data);
        $this->assertNotEmpty($result->getData()[0]->getTimestamp());
    }

    /**
     * Test case for createTransactions
     *
     * Create Transactions Batch.
     *
     * @throws ApiException
     */
    public function testCreateTransactions()
    {
        $this->transactionApi->createTransactions($this->ledger, [
            "transactions" => [
                [
                    "postings" => [
                        [
                            "source" => "world",
                            "destination" => "player1",
                            "amount" => 100,
                            "asset" => "USD"
                        ]
                    ],
                ],
                [
                    "postings" => [
                        [
                            "source" => "world",
                            "destination" => "player2",
                            "amount" => 100,
                            "asset" => "USD"
                        ]
                    ],
                ],
            ]
        ]);
        $txs = $this->transactionApi->listTransactions($this->ledger);
        $this->assertCount(2, $txs->getCursor()->getData());
    }

        /**
         * Test case for createTransactions with conflict
         *
         * Create Transactions Batch with conflict.
         *
         * @throws ApiException
         */
        public function testCreateTransactionsWithConflict()
        {
            try {
                $this->transactionApi->createTransactions($this->ledger, [
                    "transactions" => [
                        [
                            "postings" => [
                                [
                                    "source" => "world",
                                    "destination" => "player1",
                                    "amount" => 100,
                                    "asset" => "USD"
                                ]
                            ],
                            "reference" => "ref"
                        ],
                        [
                            "postings" => [
                                [
                                    "source" => "world",
                                    "destination" => "player2",
                                    "amount" => 100,
                                    "asset" => "USD"
                                ]
                            ],
                            "reference" => "ref"
                        ],
                    ]
                ]);
            } catch (\Numary\Ledger\ApiException $e) {
                $this->assertEquals("CONFLICT", $e->getResponseObject()["data"][1]->getErrorCode());
            }
        }

    /**
     * Test case for getTransaction
     *
     * Get Transaction.
     *
     */
    public function testGetTransaction()
    {
        $transaction_data = new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ],
        ]);
        $tx = $this->transactionApi->createTransaction($this->ledger, $transaction_data);
        $result = $this->transactionApi->getTransaction($this->ledger, $tx->getData()[0]->getTxid());
        $this->assertNotEmpty($result->getData()->getTimestamp());
    }

    /**
     * Test case for listTransactions
     *
     * Get all Transactions.
     *
     * @throws ApiException
     */
    public function testListTransactions()
    {
        for ($i = 0 ; $i < 3 ; $i++) {
            $this->transactionApi->createTransaction($this->ledger, new TransactionData([
                "postings" => [
                    [
                        "source" => "world",
                        "destination" => "player1",
                        "amount" => 100,
                        "asset" => "USD"
                    ]
                ],
            ]));
        }
        $result = $this->transactionApi->listTransactions($this->ledger);
        $this->assertCount(3, $result->getCursor()->getData());
    }

    /**
     * Test case for revertTransaction
     *
     * Revert Transaction.
     *
     * @doesNotPerformAssertions
     * @throws ApiException
     */
    public function testRevertTransaction()
    {
        $transaction_data = new TransactionData([
            "postings" => [
                [
                    "source" => "world",
                    "destination" => "player1",
                    "amount" => 100,
                    "asset" => "USD"
                ]
            ],
        ]);
        $tx = $this->transactionApi->createTransaction($this->ledger, $transaction_data);
        $this->transactionApi->revertTransaction($this->ledger, $tx->getData()[0]->getTxid());
    }
}
